1. 다음 MVC 코드에서, 각 요소(StartView, Controller, Model, EndView, Person)의 객체 생성 순서를 확인해 보세요.
또한, 코드 순서는 고려하지 않습니다. 다시 말해, 코드 순서에 따라 순서가 바뀌는 경우는 동시에 생성되는 것으로 간주합니다.

------------------------------//StartView.java
package step02.mvc.view;

import step02.mvc.controller.Controller;

public class StartView {

	public static void main(String[] args) {
		Controller c = new Controller();	
		c.request(2);
	}

}

------------------------------//Controller.java
package step02.mvc.controller;

import step02.mvc.model.Model;
import step02.mvc.view.EndView;
import step01.ex.Person;

public class Controller {
	/* 1번 요청 - Person 정보 검색
	 * 2번 요청 - 나이 값 수정
	 * 하나의 메소드에서 요청을 구분하여, Model의 메소드 실행 요청
	 * 실행 결과를 EndView에 출력을 위임
	 */
	public void request(int reqNo) {	
		Model m = new Model();
		EndView ev = new EndView();
		
		if(reqNo == 1) {
			ev.showResult(m.getData("명장", 29));
		} else if(reqNo ==2) {
			Person p = m.getData("현중", 28);
			ev.showResult(p);
			
			m.setData(p, 29);
			ev.reviseMsg(p);
		} else {
			ev.errorMsg();
		}
	}
	
}

------------------------------//Model.java
package step02.mvc.model;

import step01.ex.Person;

public class Model {
	//데이터 제공
	public Person getData(String name, int age) {
		return new Person(name, age);
	}
	
	//데이터(나이) 값 수정
	public void setData(Person p, int newAge) {
		p.setAge(newAge);
	}
}


------------------------------//EndView.java
package step02.mvc.view;

import step01.ex.Person;

public class EndView {
	//EndView의 모든 메소드들은 Controller에서 호출해야 함
	//검색 결과 출력
	public void showResult(Person p) {
		System.out.println("Show Current Data");
		System.out.println("Name: " + p.getName() + ", Age: " + p.getAge());
	}
	
	//수정 완료 출력 메소드
	public void reviseMsg(Person p) {
		System.out.println("Revise Finished");
		System.out.println("Name: " + p.getName() + ", Age: " + p.getAge());
	}
	
	//1과 2가 아닌 경우의 출력 메소드
	public void errorMsg() {
		System.out.println("Invalid Request");
	}
}



------------------------------//Person.java
package step01.ex;

public class Person {
	public String name;
	private int age; //1살 이상의 데이터만 대입해야 함
	
	public Person(String name, int age) {
		this.name = name;
		if(age >= 1) {
			this.age = age;
		} else {
			System.out.println("Invalid Age Value");
		}
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		if(age >= 1) {
			this.age = age;
		} else {
			System.out.println("invalid age value");
		}
	}
	
}


2. 아래에 주어진 두 실수를 나누는(앞 인자의 수를 뒤 인자의 수로 나누는) 메소드 코드를
소수점은 버림 처리하도록 바꾸어 보세요(정수 타입으로 결과값 반환).

class Test2 {
	void getDivName(double first, double second) {
		double result = first/second;
		return result;
	}

	public static void main(String args[]) {
		Test2 t = new Test();

		t.getDivName(20, 15);
	}
}